package view;

import controller.ControllerCaixa;
import controller.ControllerCidade;
import controller.ControllerCliente;
import controller.ControllerDelivery;
import controller.ControllerFormaPagamento;
import controller.ControllerItensPedidosDelivery;
import controller.ControllerProdutos;
import controller.ControllerVendas;
import java.awt.Component;
import java.awt.Dimension;
import java.sql.Date;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelCaixa;
import model.ModelCidade;
import model.ModelCliente;
import model.ModelDelivery;
import model.ModelItensPedidosDelivery;
import model.ModelProdutos;
import model.ModelVendas;
import util.BLDatas;
import util.BLMascaras;

/**
 *
 * @author Administrador
 */
public class ViewDelivery extends javax.swing.JFrame {

    ArrayList<ModelProdutos> listaProdutoses = new ArrayList<>();
    ModelProdutos modelProdutos = new ModelProdutos();
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ArrayList<ModelVendas> listaModelVendas = new ArrayList<>();
    ControllerVendas controllerVendas = new ControllerVendas();
    ModelCaixa modelCaixa = new ModelCaixa();
    ControllerCaixa controllerCaixa = new ControllerCaixa();
    ModelCliente modelCliente = new ModelCliente();
    ControllerCliente controllerCliente = new ControllerCliente();
    ModelVendas modelVendas = new ModelVendas();
    ControllerDelivery controllerDelivery = new ControllerDelivery();
    ModelDelivery modelDelivery = new ModelDelivery();
    ArrayList<ModelDelivery> listaDeliverys = new ArrayList<>();
    ModelItensPedidosDelivery modelItensPedidosDelivery = new ModelItensPedidosDelivery();
    ArrayList<ModelItensPedidosDelivery> listaModelItensPedidosDeliverys = new ArrayList<>();
    ControllerItensPedidosDelivery controllerItensPedidosDelivery = new ControllerItensPedidosDelivery();
    BLMascaras bLMascaras = new BLMascaras();
    BLDatas bLDatas = new BLDatas();

    ControllerFormaPagamento controllerFormaPagamento = new ControllerFormaPagamento();
    ControllerCidade controllerCidade = new ControllerCidade();
    ModelCidade modelCidade = new ModelCidade();
    ArrayList<ModelCliente> listaModelClientes = new ArrayList<>();
    private ViewPagamentoPDV viewPagamentoPDV;
    float valorCartao, valorCheque, valorDinheiro, valorVale;
    public int codigoVenda;
    ArrayList<JRadioButton> listadeBotoes = new ArrayList<>();
    int mesaParaImprimir;

    /**
     * Creates new form ViewMesas
     */
    public ViewDelivery() {
        initComponents();
        this.listarProdutos();
        this.listaClientes();
        this.carregarPedidosDelivery();
        this.retornarClientePeloCodigo();
        setLocationRelativeTo(null);
        this.viewPagamentoPDV = new ViewPagamentoPDV(this, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbProdutos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbProdutos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfValorProduto = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tfObservacao = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfQuantidade = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tfValorTotal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tfValorTotalMesa = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btVoltar = new javax.swing.JButton();
        cbTelefone = new componentes.UJComboBox();
        cbClientes = new componentes.UJComboBox();
        jLabel5 = new javax.swing.JLabel();
        cbCodCliente = new componentes.UJComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfNumeroVenda = new javax.swing.JTextField();
        tfEndereco = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfBairro = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tfCidade = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cbStatusProdutos = new javax.swing.JComboBox();
        cbCodProduto = new componentes.UJComboBox();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbDelivery = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        tfPesquisaPedido = new javax.swing.JTextField();
        btPesquisar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        cbPesquisa = new javax.swing.JComboBox();
        cbStatusPedido = new javax.swing.JComboBox();
        btAlterarStatus1 = new javax.swing.JButton();
        btAtualizar = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Delivery");
        setResizable(false);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jTabbedPane1.setToolTipText("");

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Telefone", "Cod.Prod.", "Produto", "Quant.", "Valor Unit.", "Valor Total", "Status", "OBservação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbProdutos);
        if (tbProdutos.getColumnModel().getColumnCount() > 0) {
            tbProdutos.getColumnModel().getColumn(0).setMinWidth(100);
            tbProdutos.getColumnModel().getColumn(0).setPreferredWidth(100);
            tbProdutos.getColumnModel().getColumn(1).setMinWidth(60);
            tbProdutos.getColumnModel().getColumn(1).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(2).setMinWidth(250);
            tbProdutos.getColumnModel().getColumn(2).setPreferredWidth(250);
            tbProdutos.getColumnModel().getColumn(3).setMinWidth(60);
            tbProdutos.getColumnModel().getColumn(3).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(3).setMaxWidth(0);
            tbProdutos.getColumnModel().getColumn(3).setHeaderValue("Quant.");
            tbProdutos.getColumnModel().getColumn(4).setMinWidth(90);
            tbProdutos.getColumnModel().getColumn(4).setPreferredWidth(90);
            tbProdutos.getColumnModel().getColumn(4).setHeaderValue("Valor Unit.");
            tbProdutos.getColumnModel().getColumn(5).setMinWidth(90);
            tbProdutos.getColumnModel().getColumn(5).setPreferredWidth(90);
            tbProdutos.getColumnModel().getColumn(6).setMinWidth(100);
            tbProdutos.getColumnModel().getColumn(6).setPreferredWidth(100);
            tbProdutos.getColumnModel().getColumn(7).setHeaderValue("OBservação");
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 860, 250));

        jLabel1.setText("Código produto");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        cbProdutos.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbProdutosPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cbProdutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 350, -1));

        jLabel2.setText("Nome produto");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, -1, -1));

        jLabel3.setText("Valor Unit.");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, -1, -1));

        tfValorProduto.setEditable(false);
        tfValorProduto.setFocusable(false);
        jPanel1.add(tfValorProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 60, -1));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Add.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 140, 90, -1));

        btSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Save.png"))); // NOI18N
        btSalvar.setText("Salvar pedido");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(btSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 540, 133, -1));

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No.png"))); // NOI18N
        btCancelar.setText("Cancelar");
        jPanel1.add(btCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 540, -1, -1));

        btRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No-entry.png"))); // NOI18N
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });
        jPanel1.add(btRemover, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 140, -1, -1));

        jLabel4.setText("Telefone:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        jPanel1.add(tfObservacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 560, -1));

        jLabel9.setText("Observação:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        tfQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfQuantidadeFocusLost(evt);
            }
        });
        tfQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfQuantidadeActionPerformed(evt);
            }
        });
        jPanel1.add(tfQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, 40, -1));

        jLabel10.setText("Qt:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, -1, -1));

        tfValorTotal.setEditable(false);
        tfValorTotal.setFocusable(false);
        jPanel1.add(tfValorTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 150, 60, -1));

        jLabel11.setText("Valor total:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 130, -1, -1));
        jPanel1.add(tfValorTotalMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 500, 130, -1));

        jLabel12.setText("Valor total:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 500, 70, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Modify.png"))); // NOI18N
        jButton1.setText("Alterar produto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 540, -1, -1));

        btVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Back.png"))); // NOI18N
        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });
        jPanel1.add(btVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 540, 105, -1));

        cbTelefone.setBackground(new java.awt.Color(255, 153, 153));
        cbTelefone.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbTelefonePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cbTelefone, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 150, -1));

        cbClientes.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbClientesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cbClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 430, -1));

        jLabel5.setText("Nome cliente:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, -1));

        cbCodCliente.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbCodClientePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cbCodCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 120, -1));

        jLabel6.setText("Cod. Cliente:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Nº do pedido:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, -1, -1));

        tfNumeroVenda.setEditable(false);
        tfNumeroVenda.setBackground(new java.awt.Color(102, 255, 204));
        jPanel1.add(tfNumeroVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 120, -1));

        tfEndereco.setEditable(false);
        jPanel1.add(tfEndereco, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 330, -1));

        jLabel8.setText("Endereço:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        tfBairro.setEditable(false);
        jPanel1.add(tfBairro, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 280, -1));

        jLabel13.setText("Bairro:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, -1, -1));

        tfCidade.setEditable(false);
        jPanel1.add(tfCidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 80, 220, -1));

        jLabel14.setText("Cidade:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, -1, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 850, 10));

        cbStatusProdutos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enviado para cozinha", "Pronto", "Faturado" }));
        cbStatusProdutos.setToolTipText("");
        jPanel1.add(cbStatusProdutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 190, 210, -1));

        cbCodProduto.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbCodProdutoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cbCodProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCodProdutoActionPerformed(evt);
            }
        });
        jPanel1.add(cbCodProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/New document.png"))); // NOI18N
        jButton2.setText("Novo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 540, -1, -1));

        jTabbedPane1.addTab("Faturas", jPanel1);

        tbDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Telefone", "Cod.Cli.", "Nome do Cliente", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbDelivery);
        if (tbDelivery.getColumnModel().getColumnCount() > 0) {
            tbDelivery.getColumnModel().getColumn(0).setMinWidth(100);
            tbDelivery.getColumnModel().getColumn(0).setPreferredWidth(100);
            tbDelivery.getColumnModel().getColumn(1).setMinWidth(60);
            tbDelivery.getColumnModel().getColumn(1).setPreferredWidth(60);
            tbDelivery.getColumnModel().getColumn(2).setMinWidth(250);
            tbDelivery.getColumnModel().getColumn(2).setPreferredWidth(250);
            tbDelivery.getColumnModel().getColumn(3).setMinWidth(100);
            tbDelivery.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jLabel15.setText("Pesquisa:");

        btPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Find.png"))); // NOI18N
        btPesquisar.setText("Pesquisar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No.png"))); // NOI18N
        jButton4.setText("Cancelar");

        btAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Modify.png"))); // NOI18N
        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Red mark.png"))); // NOI18N
        jButton7.setText("Fechar pedido");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        cbPesquisa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Telefone", "Nome do cliente" }));
        cbPesquisa.setToolTipText("");

        cbStatusPedido.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enviado para cozinha", "Pronto", "Faturado" }));

        btAlterarStatus1.setBackground(new java.awt.Color(0, 204, 153));
        btAlterarStatus1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Modify.png"))); // NOI18N
        btAlterarStatus1.setText("Alterar Status");
        btAlterarStatus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarStatus1ActionPerformed(evt);
            }
        });

        btAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Refresh.png"))); // NOI18N
        btAtualizar.setText("Atualizar");
        btAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btAlterar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btAtualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton7))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tfPesquisaPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(cbPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btPesquisar)
                        .addGap(26, 26, 26)
                        .addComponent(cbStatusPedido, 0, 174, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAlterarStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfPesquisaPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btPesquisar)
                        .addComponent(cbPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbStatusPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btAlterarStatus1))
                        .addGap(3, 3, 3)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(btAlterar)
                    .addComponent(jButton7)
                    .addComponent(btAtualizar))
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("Consulta", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 894, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbProdutosPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbProdutosPopupMenuWillBecomeInvisible
        if (this.cbProdutos.isPopupVisible()) {
            modelProdutos = controllerProdutos.getProdutosController(this.cbProdutos.getSelectedItem().toString());

            this.cbCodProduto.setSelectedItem(modelProdutos.getCodigo());
            this.tfValorProduto.setText(modelProdutos.getValor().toString());
        }
    }//GEN-LAST:event_cbProdutosPopupMenuWillBecomeInvisible

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Adiciona linhas na tabela
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        int cont = 0;
        String situacao = null;
        for (int i = 0; i < cont; i++) {
            modelo.setNumRows(0);
        }

        //retornar situação do produto selecionado
        situacao = (String) cbStatusProdutos.getSelectedItem();

        Double valor = controllerProdutos.getProdutosController(this.cbProdutos.getSelectedItem().toString()).getValor();
        //pega a quantidade de linhas e joga na variavel
        modelo.addRow(new Object[]{
            this.cbTelefone.getSelectedItem(),
            this.cbCodProduto.getSelectedItem(),
            this.cbProdutos.getSelectedItem().toString(),
            this.tfQuantidade.getText(),
            valor,
            this.tfValorTotal.getText(),
            situacao,
            this.tfObservacao.getText()
        });

        this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        this.limparCamposAbaDois();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        // TODO add your handling code here:
        modelDelivery = new ModelDelivery();
        //cadastra venda
        this.cadastrarVendaDelivery();
        //limpar campos
        this.limparCamposAbaDois();
        this.limparTabelaAbaDois();
        //carregar lista de pedidos
        this.carregarPedidosDelivery();
    }//GEN-LAST:event_btSalvarActionPerformed

    private void tfQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfQuantidadeFocusLost
        // TODO add your handling code here:
        somaValorTotal();
    }//GEN-LAST:event_tfQuantidadeFocusLost

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        //excluir linha produto 
        this.excluirLinhaProduto();
        this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
    }//GEN-LAST:event_btRemoverActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // para excluir a linha
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na tabela antes de clicar no botão alterar!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            // Obtem o modelo da JTable
            this.cbCodProduto.setSelectedItem(tbProdutos.getValueAt(linhaSelecionada, 1).toString());
            this.cbProdutos.setSelectedItem(tbProdutos.getValueAt(linhaSelecionada, 2).toString());
            this.tfQuantidade.setText(tbProdutos.getValueAt(linhaSelecionada, 3).toString());
            this.tfValorProduto.setText(tbProdutos.getValueAt(linhaSelecionada, 4).toString());
            this.tfValorTotal.setText(tbProdutos.getValueAt(linhaSelecionada, 5).toString());
            this.cbStatusProdutos.setSelectedItem(tbProdutos.getValueAt(linhaSelecionada, 6).toString());
            this.tfObservacao.setText(tbProdutos.getValueAt(linhaSelecionada, 7).toString());

            //excluir linha produto 
            this.excluirLinhaProduto();
            this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
    }//GEN-LAST:event_btVoltarActionPerformed

    private void cbCodClientePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbCodClientePopupMenuWillBecomeInvisible
        if (this.cbCodCliente.isPopupVisible()) {
            this.retornarClientePeloCodigo();
        }
    }//GEN-LAST:event_cbCodClientePopupMenuWillBecomeInvisible

    private void cbClientesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbClientesPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (this.cbClientes.isPopupVisible()) {
            modelCliente = controllerCliente.getClienteController(cbClientes.getSelectedItem().toString());
            //recupera o código
            this.cbCodCliente.setSelectedItem(modelCliente.getCodigo());
            this.tfEndereco.setText(modelCliente.getEndereco());
            this.tfBairro.setText(modelCliente.getBairro());
            this.tfCidade.setText(controllerCidade.getCidadeController(modelCliente.getCodCidade()).getNome());
            this.cbTelefone.setSelectedItem(modelCliente.getTelefone());
        }
    }//GEN-LAST:event_cbClientesPopupMenuWillBecomeInvisible

    private void cbCodProdutoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbCodProdutoPopupMenuWillBecomeInvisible
        if (this.cbCodProduto.isPopupVisible()) {
            modelProdutos = controllerProdutos.getProdutosController(Integer.parseInt(cbCodProduto.getSelectedItem().toString()));
            //recupera o código
            this.cbProdutos.setSelectedItem(modelProdutos.getNome());
            this.tfValorProduto.setText(String.valueOf(modelProdutos.getValor()));
        }
    }//GEN-LAST:event_cbCodProdutoPopupMenuWillBecomeInvisible

    private void cbCodProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCodProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCodProdutoActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        //retornar dados para alterar
        this.retornarAlterar();
        // para excluir a linha
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
    }//GEN-LAST:event_btAlterarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.listarProdutos();
        this.listaClientes();
        this.retornarClientePeloCodigo();
        this.limparTabela();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbTelefonePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbTelefonePopupMenuWillBecomeInvisible
        if (this.cbTelefone.isPopupVisible()) {
            modelCliente = controllerCliente.getClienteTelefoneController(cbTelefone.getSelectedItem().toString());
            //recupera o código
            this.cbCodCliente.setSelectedItem(modelCliente.getCodigo());
            this.cbClientes.setSelectedItem(modelCliente.getNome());
            this.tfEndereco.setText(modelCliente.getEndereco());
            this.tfBairro.setText(modelCliente.getBairro());
            this.tfCidade.setText(controllerCidade.getCidadeController(modelCliente.getCodCidade()).getNome());
        }
    }//GEN-LAST:event_cbTelefonePopupMenuWillBecomeInvisible

    private void tfQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfQuantidadeActionPerformed

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed
        DefaultTableModel tabela = (DefaultTableModel) this.tbDelivery.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tabela);
        this.tbDelivery.setRowSorter(sorter);
        String text = tfPesquisaPedido.getText();

        if (cbPesquisa.getSelectedIndex() == 0) {
            //definir pesquisa por n° telefone
            sorter.setRowFilter(RowFilter.regexFilter(text, 0));
        } else if (cbPesquisa.getSelectedIndex() == 1) {
            //definir pesquisa por cliente
            sorter.setRowFilter(RowFilter.regexFilter(text, 2));
        }
    }//GEN-LAST:event_btPesquisarActionPerformed

    private void btAlterarStatus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarStatus1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btAlterarStatus1ActionPerformed

    private void btAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarActionPerformed
        // atualizar lista de pedidos
        this.carregarPedidosDelivery();
    }//GEN-LAST:event_btAtualizarActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int linhaSelecionada = tbDelivery.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um pedido na tabela antes de clicar no botão Fechar Pedido!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            //recuperar produto
            String telefoneCliente = tbDelivery.getValueAt(linhaSelecionada, 0).toString();
            //retornar dados para alterar
            this.retornarAlterar();
            // para excluir a linha
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
            //pegunta se realmente deseja excluir
            int opcao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja"
                    + " fechar o pedido?", "Atenção", JOptionPane.YES_NO_OPTION);
            //se sim exclui, se não não faz nada    
            if (opcao == JOptionPane.OK_OPTION) {
                viewPagamentoPDV.setValorTotal(Float.parseFloat(this.tfValorTotalMesa.getText()));
                viewPagamentoPDV.setTextFildValorTotal();
                viewPagamentoPDV.setVisible(true);
                zerarValoresCaixa();
                if (viewPagamentoPDV.getReturnStatus() == 1) {
                    salvarVenda();
                    //exlui dados anteriores
                    controllerDelivery.excluirDeliveryController(telefoneCliente);
                    controllerItensPedidosDelivery.excluirItensPedidosDeliveryController(telefoneCliente);
                }
            }
        }
        limparTabela();
        carregarPedidosDelivery();
    }//GEN-LAST:event_jButton7ActionPerformed

    //salvar uma venda de mesa
    private boolean salvarVenda() {
        listaModelVendas = new ArrayList<>();
        listaProdutoses = new ArrayList<>();
        int codigoProduto;
        float quantidade = 0;
        BLDatas bl = new BLDatas();

        for (int i = 0; i < tbProdutos.getRowCount(); i++) {
            modelVendas = new ModelVendas();
            modelProdutos = new ModelProdutos();
            modelVendas.setClientesCodigo(Integer.parseInt(cbCodCliente.getSelectedItem().toString()));
            modelVendas.setDesconto(viewPagamentoPDV.getDesconto());
            modelVendas.setValorTotal(viewPagamentoPDV.getValorTotal());
            modelVendas.setTipo(1);
            try {
                modelVendas.setDataVenda(bl.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            } catch (Exception ex) {
                Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
            modelVendas.setProdutosCodigo(Integer.parseInt(tbProdutos.getValueAt(i, 1).toString()));
            modelVendas.setQuantidade(Float.parseFloat(tbProdutos.getValueAt(i, 3).toString()));
            modelVendas.setTipoPagamento(controllerFormaPagamento.getFormaPagamentoController(viewPagamentoPDV.getTipoPagamento()).getCodigo());
            modelVendas.setValor(Double.parseDouble(tbProdutos.getValueAt(i, 4).toString()));
            modelProdutos.setCodigo(Integer.parseInt(tbProdutos.getValueAt(i, 1).toString()));
            quantidade = Float.parseFloat(tbProdutos.getValueAt(i, 3).toString());
            modelProdutos.setEstoque(quantidade);
            modelProdutos.setValor(Double.parseDouble(tbProdutos.getValueAt(i, 4).toString()));
            listaModelVendas.add(modelVendas);
            listaProdutoses.add(modelProdutos);
        }
        modelVendas.setListamModelVendases(listaModelVendas);
        modelProdutos.setListaModelProdutoses(listaProdutoses);

        //salvar venda
        codigoVenda = controllerVendas.salvarVendasController(modelVendas);
        if (codigoVenda > 0) {
            modelVendas.setCodigo(codigoVenda);
            //da baixa no estoque
            for (int i = 0; i < modelProdutos.getListaModelProdutoses().size(); i++) {
                codigoProduto = modelProdutos.getListaModelProdutoses().get(i).getCodigo();
                quantidade = controllerProdutos.getProdutosController(codigoProduto).getEstoque() - modelProdutos.getListaModelProdutoses().get(i).getEstoque();
                controllerProdutos.atualizarProdutosQuantidadeUmController(codigoProduto, quantidade);
            }

            //salvar lista de produtos
            controllerVendas.salvarVendasProdutosController(modelVendas);
            JOptionPane.showMessageDialog(this, "Registro gravado com sucesso!");
            adicionarValorCaixa();
            //imprimir cupom
            imprimirCupom();

            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao gravar os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private void retornarAlterar() {
        // para excluir a linha
        float valorTotal = 0.f;
        int linhaSelecionada = tbDelivery.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um pedido na tabela antes de clicar no botão alterar!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            //recuperar produto
            String telefoneCliente = tbDelivery.getValueAt(linhaSelecionada, 0).toString();
            listaModelItensPedidosDeliverys = new ArrayList<>();
            modelCliente = controllerCliente.getClienteTelefoneController(telefoneCliente);
            listaModelItensPedidosDeliverys = controllerItensPedidosDelivery.getListaItensPedidosDeliveryController(telefoneCliente);

            //setar dados do cliente
            cbTelefone.setSelectedItem(modelCliente.getTelefone());
            cbCodCliente.setSelectedItem(modelCliente.getCodigo());
            cbClientes.setSelectedItem(modelCliente.getNome());
            tfEndereco.setText(modelCliente.getEndereco());
            tfBairro.setText(modelCliente.getBairro());
            tfCidade.setText(controllerCidade.getCidadeController(modelCliente.getCodCidade()).getNome());

            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            modelo.setNumRows(0);

            //setar dados dos produtos
            for (int i = 0; i < listaModelItensPedidosDeliverys.size(); i++) {
                //buscar nome do produto
                modelProdutos = new ModelProdutos();
                modelProdutos = controllerProdutos.getProdutosController(listaModelItensPedidosDeliverys.get(i).getCodigoProduto());
                //calcula o valor total do produto e arredonda
                valorTotal = bLMascaras.arredondamentoComPontoDuasCasas((float) (modelProdutos.getValor() * listaModelItensPedidosDeliverys.get(i).getQuantidade()));

                modelo.addRow(new Object[]{
                    listaModelItensPedidosDeliverys.get(i).getCodigoTelefone(),
                    listaModelItensPedidosDeliverys.get(i).getCodigoProduto(),
                    modelProdutos.getNome(),
                    listaModelItensPedidosDeliverys.get(i).getQuantidade(),
                    modelProdutos.getValor(),
                    valorTotal,
                    listaModelItensPedidosDeliverys.get(i).getStatusPeido(),
                    listaModelItensPedidosDeliverys.get(i).getObservacao()
                });
            }

        }
        //atualizar valor total
        this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        //recua uma aba
    }

    private void retornarClientePeloCodigo() {
        modelCliente = controllerCliente.getClienteController(Integer.parseInt(cbCodCliente.getSelectedItem().toString()));
        //recupera o nome
        this.cbClientes.setSelectedItem(String.valueOf(modelCliente.getNome()));
        this.tfEndereco.setText(modelCliente.getEndereco());
        this.tfBairro.setText(modelCliente.getBairro());
        this.tfCidade.setText(controllerCidade.getCidadeController(modelCliente.getCodCidade()).getNome());
        this.cbTelefone.setSelectedItem(modelCliente.getTelefone());
    }

    private void limparTabela() {
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        modelo.setNumRows(0);
    }

    //carregar pedidos delivery
    private void carregarPedidosDelivery() {
        listaDeliverys = new ArrayList<>();
        listaDeliverys = controllerDelivery.getListaDeliveryController();
        DefaultTableModel modelo = (DefaultTableModel) tbDelivery.getModel();
        modelo.setNumRows(0);
        //CARREGA OS DADOS DA LISTA NA TABELA
        int cont = listaDeliverys.size();
        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaDeliverys.get(i).getCodigoTelefone(),
                listaDeliverys.get(i).getCodigoCliente(),
                controllerCliente.getClienteController(listaDeliverys.get(i).getCodigoCliente()).getNome(),
                listaDeliverys.get(i).getSituacao()
            });
        }
    }

    public void centralizarContainer(Component pai, Component filho) {

        // obter dimensões do pai  
        int larguraPai = pai.getWidth();
        int alturaPai = pai.getHeight();

        // obter dimensões do filho  
        int larguraFilho = filho.getWidth();
        int alturaFilho = filho.getWidth();

        // calcular novas coordenadas do filho    
        int novoX = (larguraPai - larguraFilho);
        int novoY = (alturaPai - alturaFilho);

        // centralizar filho  
        filho.setSize(new Dimension(novoX, novoY));
        filho.repaint();
    }

    //Excluir linha produto selecionado
    private void excluirLinhaProduto() {
        // para excluir a linha
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            return;
        } else {
            // Obtem o modelo da JTable
            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            // Remove a linha
            modelo.removeRow(linhaSelecionada);
        }
    }

    /**
     * Imprimir cupom
     */
    private void imprimirCupom() {
        ControllerVendas controllerVendas = new ControllerVendas();
        controllerVendas.gerarRelatorioPDV(codigoVenda);
    }

    //adicionar valor ao caixa
    private void adicionarValorCaixa() {
        modelCaixa = new ModelCaixa();
        modelCaixa = controllerCaixa.getCaixaController(1);
        if (modelVendas.getTipoPagamento() == 1) {
            valorDinheiro = modelVendas.getValorTotal();
            modelCaixa.setDinheiro(modelCaixa.getDinheiro() + valorDinheiro);
        } else if (modelVendas.getTipoPagamento() == 2) {
            valorCartao = modelVendas.getValorTotal();
            modelCaixa.setCartao(modelCaixa.getCartao() + valorCartao);
        } else if (modelVendas.getTipoPagamento() == 3) {
            valorCheque = modelVendas.getValorTotal();
            modelCaixa.setCheque(modelCaixa.getCheque() + valorCheque);
        } else if (modelVendas.getTipoPagamento() == 4) {
            valorVale = modelVendas.getValorTotal();
            modelCaixa.setVale(modelCaixa.getVale() + valorVale);
        }
        controllerCaixa.atualizarCaixaController(modelCaixa);
    }

    //zerar o caixa
    private void zerarValoresCaixa() {
        valorCartao = 0;
        valorCheque = 0;
        valorDinheiro = 0;
        valorVale = 0;
    }

    //soma valor total da conta do cliente e seta no campo total
    private void somaValorTotal() {
        Float quantidade, valor;
        if (this.tfQuantidade.getText().equals("")) {
            quantidade = 0f;
        } else {
            quantidade = Float.parseFloat(this.tfQuantidade.getText());
        }
        if (this.tfValorProduto.getText().equals("")) {
            valor = 0f;
        } else {
            valor = Float.parseFloat(this.tfValorProduto.getText());
        }
        this.tfValorTotal.setText(quantidade * valor + "");
    }

    //limpar dados da tabela da aba 2
    private void limparTabelaAbaDois() {
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        modelo.setNumRows(0);
    }

    //limpar campos da tabela da aba 2
    private void limparCamposAbaDois() {
        this.tfQuantidade.setText("");
        this.tfValorProduto.setText("");
        this.tfValorTotal.setText("");
        this.tfObservacao.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewDelivery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewDelivery().setVisible(true);
            }
        });
    }

    //listar todos os produtos no combobox
    private void listarProdutos() {
        listaProdutoses = new ArrayList<>();
        listaProdutoses = controllerProdutos.getListaProdutosController();
        cbProdutos.removeAllItems();
        cbCodProduto.removeAllItems();
        for (int i = 0; i < listaProdutoses.size(); i++) {
            cbProdutos.addItem(listaProdutoses.get(i).getNome());
            cbCodProduto.addItem(listaProdutoses.get(i).getCodigo());
        }
    }

    //carregar lista de clientes
    private void listaClientes() {
        listaModelClientes = new ArrayList<>();
        listaModelClientes = controllerCliente.getListaClienteController();
        cbClientes.removeAllItems();
        cbCodCliente.removeAllItems();
        cbTelefone.removeAllItems();
        for (int i = 0; i < listaModelClientes.size(); i++) {
            cbClientes.addItem(listaModelClientes.get(i).getNome());
            cbCodCliente.addItem(listaModelClientes.get(i).getCodigo());
            cbTelefone.addItem(listaModelClientes.get(i).getTelefone());
        }
    }

    //cadastrar um venda de delivery por telefone
    private boolean cadastrarVendaDelivery() {
        String numeroTelefone = this.cbTelefone.getSelectedItem().toString();

        //exlui dados anteriores
        controllerDelivery.excluirDeliveryController(numeroTelefone);
        controllerItensPedidosDelivery.excluirItensPedidosDeliveryController(numeroTelefone);

        if (tbProdutos.getRowCount() < 1) {
            JOptionPane.showMessageDialog(this, "Você deve adicionar ao menos um produto para salvar!", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
            return false;
        } else {

            //setar dados do delivery
            modelDelivery.setCodigoCliente(Integer.parseInt(this.cbCodCliente.getSelectedItem().toString()));
            modelDelivery.setCodigoTelefone(numeroTelefone);
            modelDelivery.setSituacao(cbStatusProdutos.getSelectedItem().toString());
            controllerDelivery.salvarDeliveryController(modelDelivery);

            //setar dados dos itens do delivery
            listaModelItensPedidosDeliverys = new ArrayList<>();
            for (int i = 0; i < tbProdutos.getRowCount(); i++) {
                modelItensPedidosDelivery = new ModelItensPedidosDelivery();
                modelItensPedidosDelivery.setCodigoTelefone(tbProdutos.getValueAt(i, 0).toString());
                modelItensPedidosDelivery.setCodigoProduto(Integer.parseInt(tbProdutos.getValueAt(i, 1).toString()));
                modelItensPedidosDelivery.setQuantidade(Float.parseFloat(tbProdutos.getValueAt(i, 3).toString()));
                modelItensPedidosDelivery.setStatusPeido(String.valueOf(tbProdutos.getValueAt(i, 6).toString()));
                modelItensPedidosDelivery.setObservacao(String.valueOf(tbProdutos.getValueAt(i, 7).toString()));
                listaModelItensPedidosDeliverys.add(modelItensPedidosDelivery);
            }

            modelProdutos.setListaModelProdutoses(listaProdutoses);

            //salvar
            controllerItensPedidosDelivery.salvarItensPedidosDeliveryController(listaModelItensPedidosDeliverys);
            JOptionPane.showMessageDialog(this, "Registro gravado com sucesso!");

            //atualizar
            //avançar para aba 2
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
            return true;
        }
    }

    /**
     * Soma e atualiza os valores total
     *
     * @return
     */
    private float somaEAtualizaValorTotal() {
        float soma = 0;
        float valor = 0;
        int cont = tbProdutos.getRowCount();
        for (int i = 0; i < cont; i++) {
            valor = Float.parseFloat(String.valueOf(tbProdutos.getValueAt(i, 5)));
            soma = valor + soma;
        }
        return soma;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btAlterarStatus1;
    private javax.swing.JButton btAtualizar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btPesquisar;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btVoltar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private componentes.UJComboBox cbClientes;
    private componentes.UJComboBox cbCodCliente;
    private componentes.UJComboBox cbCodProduto;
    private javax.swing.JComboBox cbPesquisa;
    private javax.swing.JComboBox cbProdutos;
    private javax.swing.JComboBox cbStatusPedido;
    private javax.swing.JComboBox cbStatusProdutos;
    private componentes.UJComboBox cbTelefone;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbDelivery;
    private javax.swing.JTable tbProdutos;
    private javax.swing.JTextField tfBairro;
    private javax.swing.JTextField tfCidade;
    private javax.swing.JTextField tfEndereco;
    private javax.swing.JTextField tfNumeroVenda;
    private javax.swing.JTextField tfObservacao;
    private javax.swing.JTextField tfPesquisaPedido;
    private javax.swing.JTextField tfQuantidade;
    private javax.swing.JTextField tfValorProduto;
    private javax.swing.JTextField tfValorTotal;
    private javax.swing.JTextField tfValorTotalMesa;
    // End of variables declaration//GEN-END:variables
}
