package view;

import controller.ControllerCaixa;
import controller.ControllerFormaPagamento;
import controller.ControllerItensPedidoMesa;
import controller.ControllerMesas;
import controller.ControllerProdutos;
import controller.ControllerVendas;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;
import model.ModelCaixa;
import model.ModelItensPedidoMesa;
import model.ModelMesas;
import model.ModelProdutos;
import model.ModelVendas;
import util.AguardeGerandoRelatorio;
import util.BLDatas;

/**
 *
 * @author Administrador
 */
public class ViewMesas extends javax.swing.JFrame {

    ArrayList<ModelProdutos> listaProdutoses = new ArrayList<>();
    ModelProdutos modelProdutos = new ModelProdutos();
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ModelItensPedidoMesa modelItensPedidoMesa = new ModelItensPedidoMesa();
    ControllerItensPedidoMesa controllerItensPedidoMesa = new ControllerItensPedidoMesa();
    ArrayList<ModelItensPedidoMesa> listaModelItensPedidoMesas = new ArrayList<>();
    ArrayList<ModelMesas> listaModelMesases = new ArrayList<>();
    ModelMesas modelMesas = new ModelMesas();
    ControllerMesas controllerMesas = new ControllerMesas();
    ArrayList<ModelVendas> listaModelVendas = new ArrayList<>();
    ControllerVendas controllerVendas = new ControllerVendas();
    ModelCaixa modelCaixa = new ModelCaixa();
    ControllerCaixa controllerCaixa = new ControllerCaixa();
    ModelVendas modelVendas = new ModelVendas();
    ControllerFormaPagamento controllerFormaPagamento = new ControllerFormaPagamento();
    private ViewPagamentoPDV viewPagamentoPDV;
    float valorCartao, valorCheque, valorDinheiro, valorVale;
    public int codigoVenda;
    ArrayList<JRadioButton> listadeBotoes = new ArrayList<>();
    int mesaParaImprimir;

    /**
     * Creates new form ViewMesas
     */
    public ViewMesas() {
        initComponents();
        this.popularTabela();
        this.listarProdutos();
        this.retornarCodigoNomeProduto();
        setLocationRelativeTo(null);
        this.viewPagamentoPDV = new ViewPagamentoPDV(this, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jbAtualizar = new javax.swing.JButton();
        jbVizualizarMesa = new javax.swing.JButton();
        jbImprimirCozinha = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanelMesas = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbProdutos = new javax.swing.JTable();
        tfCodigoProduto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cbProdutos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfValorProduto = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        tfNumeroMesa = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btFecharConta = new javax.swing.JButton();
        tfObservacao = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfQuantidade = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tfValorTotal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tfValorTotalMesa = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btVoltar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btAlterarStatus = new javax.swing.JButton();
        rbEnviadoCozinha = new javax.swing.JRadioButton();
        rbEmPedido = new javax.swing.JRadioButton();
        rbPronto = new javax.swing.JRadioButton();
        rbEntregue = new javax.swing.JRadioButton();
        rbFaturado = new javax.swing.JRadioButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Venda por Mesas");
        setResizable(false);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Para executar um procedimento selecione a mesa e clique no botão com a função desejada:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jTabbedPane1.setToolTipText("");

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Refresh.png"))); // NOI18N
        jbAtualizar.setText("Atualizar");
        jbAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jbAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, -1, -1));

        jbVizualizarMesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/View.png"))); // NOI18N
        jbVizualizarMesa.setText("Vizualizar mesa");
        jbVizualizarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVizualizarMesaActionPerformed(evt);
            }
        });
        jPanel2.add(jbVizualizarMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 550, -1, -1));

        jbImprimirCozinha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/print.png"))); // NOI18N
        jbImprimirCozinha.setText("Imprimir para cozinha");
        jbImprimirCozinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirCozinhaActionPerformed(evt);
            }
        });
        jPanel2.add(jbImprimirCozinha, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 550, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setText("Mesas Ocupadas");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(524, 16, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 102));
        jLabel7.setText("Mesas Livres");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 16, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 0, 0));
        jLabel8.setText("Mesa Com pedido em Aberto");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(656, 16, -1, -1));

        jPanelMesas.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jPanelMesas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 39, 1130, 500));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Text.png"))); // NOI18N
        jButton2.setText("Exibir selecionado");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 550, -1, -1));

        jTabbedPane1.addTab("Mesas", jPanel2);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mesa", "Cod.Produto", "Produto", "Quant.", "Valor Unit.", "Valor Total", "Status", "OBservação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbProdutos);
        if (tbProdutos.getColumnModel().getColumnCount() > 0) {
            tbProdutos.getColumnModel().getColumn(0).setMinWidth(60);
            tbProdutos.getColumnModel().getColumn(0).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(0).setMaxWidth(60);
            tbProdutos.getColumnModel().getColumn(1).setMinWidth(80);
            tbProdutos.getColumnModel().getColumn(1).setPreferredWidth(80);
            tbProdutos.getColumnModel().getColumn(1).setMaxWidth(80);
            tbProdutos.getColumnModel().getColumn(3).setMinWidth(60);
            tbProdutos.getColumnModel().getColumn(3).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(3).setMaxWidth(60);
            tbProdutos.getColumnModel().getColumn(4).setMinWidth(90);
            tbProdutos.getColumnModel().getColumn(4).setPreferredWidth(90);
            tbProdutos.getColumnModel().getColumn(4).setMaxWidth(90);
            tbProdutos.getColumnModel().getColumn(5).setMinWidth(90);
            tbProdutos.getColumnModel().getColumn(5).setPreferredWidth(90);
            tbProdutos.getColumnModel().getColumn(5).setMaxWidth(90);
            tbProdutos.getColumnModel().getColumn(6).setMinWidth(100);
            tbProdutos.getColumnModel().getColumn(6).setPreferredWidth(100);
            tbProdutos.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 174, 1139, 325));

        tfCodigoProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfCodigoProdutoFocusLost(evt);
            }
        });
        jPanel1.add(tfCodigoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 31, 123, -1));

        jLabel1.setText("Código produto");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        cbProdutos.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbProdutosPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cbProdutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 31, 638, -1));

        jLabel2.setText("Nome produto");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 11, -1, -1));

        jLabel3.setText("Valor unitário:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(854, 11, -1, -1));

        tfValorProduto.setEditable(false);
        tfValorProduto.setFocusable(false);
        jPanel1.add(tfValorProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(854, 31, 80, -1));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Add.png"))); // NOI18N
        jButton6.setText("Adicionar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1027, 62, 113, -1));

        btSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Save.png"))); // NOI18N
        btSalvar.setText("Salvar pedido");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(btSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1016, 555, 133, -1));

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No.png"))); // NOI18N
        btCancelar.setText("Cancelar");
        jPanel1.add(btCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 555, -1, -1));

        btRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/No-entry.png"))); // NOI18N
        btRemover.setText("Remover");
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });
        jPanel1.add(btRemover, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 555, -1, -1));

        tfNumeroMesa.setEditable(false);
        tfNumeroMesa.setFocusable(false);
        jPanel1.add(tfNumeroMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(1027, 31, 113, -1));

        jLabel4.setText("Mesa");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1027, 11, -1, -1));

        btFecharConta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Apply.png"))); // NOI18N
        btFecharConta.setText("Fechar conta");
        btFecharConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFecharContaActionPerformed(evt);
            }
        });
        jPanel1.add(btFecharConta, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 555, -1, -1));
        jPanel1.add(tfObservacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 65, 945, -1));

        jLabel9.setText("Observação:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 68, -1, -1));

        tfQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfQuantidadeFocusLost(evt);
            }
        });
        jPanel1.add(tfQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(783, 31, 65, -1));

        jLabel10.setText("Quantidade:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(783, 11, -1, -1));

        tfValorTotal.setEditable(false);
        tfValorTotal.setFocusable(false);
        jPanel1.add(tfValorTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 31, 81, -1));

        jLabel11.setText("Valor total:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 11, -1, -1));
        jPanel1.add(tfValorTotalMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(1016, 517, 133, -1));

        jLabel12.setText("Valor total:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(953, 520, -1, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Modify.png"))); // NOI18N
        jButton1.setText("Alterar produto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(331, 555, -1, -1));

        btVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Back.png"))); // NOI18N
        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });
        jPanel1.add(btVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(117, 555, 105, -1));

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Status do produto - para alterar o status de um produto selecione o produto na tabela, selecione o novo status do produto e clique em \"Alterar Status\""));

        btAlterarStatus.setBackground(new java.awt.Color(0, 204, 153));
        btAlterarStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/18x18/Modify.png"))); // NOI18N
        btAlterarStatus.setText("Alterar Status");
        btAlterarStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarStatusActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbEnviadoCozinha);
        rbEnviadoCozinha.setText("2º Enviado para cozinha");

        buttonGroup1.add(rbEmPedido);
        rbEmPedido.setSelected(true);
        rbEmPedido.setText("1º Em pedido");

        buttonGroup1.add(rbPronto);
        rbPronto.setText("3º Pronto para servir");

        buttonGroup1.add(rbEntregue);
        rbEntregue.setText("4º Entregue");

        buttonGroup1.add(rbFaturado);
        rbFaturado.setText("5º Faturado");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbEmPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbEnviadoCozinha, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPronto, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbEntregue, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbFaturado, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAlterarStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(293, 293, 293))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEmPedido)
                    .addComponent(rbPronto)
                    .addComponent(rbFaturado)
                    .addComponent(btAlterarStatus)
                    .addComponent(rbEnviadoCozinha)
                    .addComponent(rbEntregue))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, 1139, -1));

        jTabbedPane1.addTab("Faturas", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbVizualizarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVizualizarMesaActionPerformed
        // TODO add your handling code here:  
        int mesa = 0;
        String mesaString;
        for (int i = 0; i < listadeBotoes.size(); i++) {
            if (listadeBotoes.get(i).isSelected()) {
                mesaString = listadeBotoes.get(i).getText();
                mesaString = mesaString.trim();
                mesa = Integer.parseInt(mesaString);
            }
        }
        if (mesa == 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma mesa foi selecionada!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);

        } else {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
            this.tfNumeroMesa.setText(mesa + "");
            //retornar todos os produtos do pedido da mesa
            listaModelItensPedidoMesas = controllerItensPedidoMesa.getListaItensPedidoMesaController(mesa);

            //preencher a tabela com os itens retornados
            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            modelo.setNumRows(0);
            //CARREGA OS DADOS DA LISTA NA TABELA
            int cont = listaModelItensPedidoMesas.size();
            for (int i = 0; i < cont; i++) {
                modelProdutos = controllerProdutos.getProdutosController(listaModelItensPedidoMesas.get(i).getCodigoProduto());
                modelo.addRow(new Object[]{
                    listaModelItensPedidoMesas.get(i).getCodigoMesa(),
                    listaModelItensPedidoMesas.get(i).getCodigoProduto(),
                    modelProdutos.getNome(),
                    listaModelItensPedidoMesas.get(i).getQuantidade(),
                    modelProdutos.getValor(),
                    modelProdutos.getValor() * listaModelItensPedidoMesas.get(i).getQuantidade(),
                    listaModelItensPedidoMesas.get(i).getStatusPedido(),
                    listaModelItensPedidoMesas.get(i).getObservacao()
                });
            }
            //SOMA VALOR TOTAL 
            this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        }
    }//GEN-LAST:event_jbVizualizarMesaActionPerformed

    private void jbAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarActionPerformed
        // TODO add your handling code here:
        this.popularTabela();
    }//GEN-LAST:event_jbAtualizarActionPerformed

    private void tfCodigoProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodigoProdutoFocusLost
        // TODO add your handling code here:
        modelProdutos = new ModelProdutos();
        modelProdutos = controllerProdutos.getProdutosController(Integer.parseInt(this.tfCodigoProduto.getText()));
        this.cbProdutos.setSelectedItem(modelProdutos.getNome());
        this.tfValorProduto.setText(modelProdutos.getValor().toString());
        somaValorTotal();
    }//GEN-LAST:event_tfCodigoProdutoFocusLost

    private void cbProdutosPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbProdutosPopupMenuWillBecomeInvisible
        this.retornarCodigoNomeProduto();
    }//GEN-LAST:event_cbProdutosPopupMenuWillBecomeInvisible

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Adiciona linhas na tabela
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        int cont = 0;
        String situacao = null;
        for (int i = 0; i < cont; i++) {
            modelo.setNumRows(0);
        }

        //retornar situação do produto selecionado
        situacao = retornarStatusSelecionado();

        Double valor = controllerProdutos.getProdutosController(this.cbProdutos.getSelectedItem().toString()).getValor();
        //pega a quantidade de linhas e joga na variavel
        modelo.addRow(new Object[]{
            this.tfNumeroMesa.getText(),
            this.tfCodigoProduto.getText(),
            this.cbProdutos.getSelectedItem().toString(),
            this.tfQuantidade.getText(),
            valor,
            this.tfValorTotal.getText(),
            situacao,
            this.tfObservacao.getText()
        });

        this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        this.limparCamposAbaDois();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        // TODO add your handling code here:
        modelMesas = new ModelMesas();
        //cadastra venda
        this.cadastrarVendaMesa();
        //setar os dados da mesa
        modelMesas.setNumeroMesa(Integer.parseInt(this.tfNumeroMesa.getText()));
        modelMesas.setSituacaoMesa("ocupada");
        controllerMesas.atualizarMesasController(modelMesas);
        pintarUmaMesa(Integer.parseInt(this.tfNumeroMesa.getText()));
        //limpar campos
        this.limparCamposAbaDois();
        this.limparTabelaAbaDois();
    }//GEN-LAST:event_btSalvarActionPerformed

    private void tfQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfQuantidadeFocusLost
        // TODO add your handling code here:
        somaValorTotal();
    }//GEN-LAST:event_tfQuantidadeFocusLost

    private void btFecharContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFecharContaActionPerformed
        // TODO add your handling code here:
        modelMesas = new ModelMesas();
        //fechar conta da mesa

        //setar os dados da mesa
        modelMesas.setNumeroMesa(Integer.parseInt(this.tfNumeroMesa.getText()));
        modelMesas.setSituacaoMesa("livre");
        controllerMesas.atualizarMesasController(modelMesas);

        viewPagamentoPDV.setValorTotal(Float.parseFloat(this.tfValorTotalMesa.getText()));
        viewPagamentoPDV.setTextFildValorTotal();
        viewPagamentoPDV.setVisible(true);
        zerarValoresCaixa();
        if (viewPagamentoPDV.getReturnStatus() == 1) {
            salvarVenda();
            //exlui dados anteriores
        }
        //exlui dados anteriores
        controllerItensPedidoMesa.excluirItensPedidoMesaController(Integer.parseInt(this.tfNumeroMesa.getText()));
        //pintar na tela
        pintarMesas();
        //limpar dados da interface
        this.limparCamposAbaDois();
        this.limparTabelaAbaDois();
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
    }//GEN-LAST:event_btFecharContaActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        //excluir linha produto 
        this.excluirLinhaProduto();
        this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
    }//GEN-LAST:event_btRemoverActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // para excluir a linha
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na tabela antes de clicar no botão alterar!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            // Obtem o modelo da JTable
            this.tfCodigoProduto.setText(tbProdutos.getValueAt(linhaSelecionada, 1).toString());
            this.cbProdutos.setSelectedItem(tbProdutos.getValueAt(linhaSelecionada, 2).toString());
            this.tfQuantidade.setText(tbProdutos.getValueAt(linhaSelecionada, 3).toString());
            this.tfValorProduto.setText(tbProdutos.getValueAt(linhaSelecionada, 4).toString());
            this.tfValorTotal.setText(tbProdutos.getValueAt(linhaSelecionada, 5).toString());
            this.marcarStatusSelecionado(tbProdutos.getValueAt(linhaSelecionada, 6).toString());
            this.tfObservacao.setText(tbProdutos.getValueAt(linhaSelecionada, 7).toString());

            //excluir linha produto 
            this.excluirLinhaProduto();
            this.tfValorTotalMesa.setText(String.valueOf(this.somaEAtualizaValorTotal()));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbImprimirCozinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirCozinhaActionPerformed
        //pegar numero da mesa
        int mesa = 0;
        String mesaString;
        for (int i = 0; i < listadeBotoes.size(); i++) {
            if (listadeBotoes.get(i).isSelected()) {
                mesaString = listadeBotoes.get(i).getText().trim();
                mesa = Integer.parseInt(mesaString);
            }
        }

        mesaParaImprimir = mesa;
        //pegunta
        int opcao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja"
                + " imprimir o pedido n°:\n" + "\n " + mesa + "?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (opcao == JOptionPane.OK_OPTION) {
            final AguardeGerandoRelatorio carregando = new AguardeGerandoRelatorio();
            final ControllerVendas controllerVendas = new ControllerVendas();
            carregando.setVisible(true);
            Thread t = new Thread() {
                @Override
                public void run() {
//                relatorio cozinha
                    controllerVendas.gerarRelatorioPedidoCozinha(mesaParaImprimir);
                    carregando.dispose();
                }
            };
            t.start();
        }
    }//GEN-LAST:event_jbImprimirCozinhaActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btAlterarStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarStatusActionPerformed
        // para excluir a linha
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na tabela antes de clicar no botão alterar!", "ERRO", JOptionPane.ERROR_MESSAGE);
        } else {
            // Obtem o modelo da JTable
            tbProdutos.setValueAt(retornarStatusSelecionado(), linhaSelecionada, 6);
        }
    }//GEN-LAST:event_btAlterarStatusActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //pegar numero da mesa
        int mesa = 0;
        String mesaString;
        for (int i = 0; i < listadeBotoes.size(); i++) {
            if (listadeBotoes.get(i).isSelected()) {
                mesaString = listadeBotoes.get(i).getText().trim();
                mesa = Integer.parseInt(mesaString);
            }
        }

        mesaParaImprimir = mesa;
        //pegunta
        final AguardeGerandoRelatorio carregando = new AguardeGerandoRelatorio();
        final ControllerVendas controllerVendas = new ControllerVendas();
        carregando.setVisible(true);
        Thread t = new Thread() {
            @Override
            public void run() {
//                relatorio cozinha
                controllerVendas.vizualizarPedidoDaMesa(mesaParaImprimir);
                carregando.dispose();
            }
        };
        t.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void centralizarContainer(Component pai, Component filho) {

        // obter dimensões do pai  
        int larguraPai = pai.getWidth();
        int alturaPai = pai.getHeight();

        // obter dimensões do filho  
        int larguraFilho = filho.getWidth();
        int alturaFilho = filho.getWidth();

        // calcular novas coordenadas do filho    
        int novoX = (larguraPai - larguraFilho);
        int novoY = (alturaPai - alturaFilho);

        // centralizar filho  
        filho.setSize(new Dimension(novoX, novoY));
        filho.repaint();
    }

    private void pintarMesas() {
        ControllerMesas controllerMesas = new ControllerMesas();
        listaModelMesases = controllerMesas.getListaMesasController();
        for (int i = 0; i < listaModelMesases.size() - 1; i++) {
            if (listaModelMesases.get(i).getSituacaoMesa().equals("ocupada")) {
                listadeBotoes.get(listaModelMesases.get(i).getNumeroMesa() - 1).setForeground(Color.BLUE);
            }
            if (listaModelMesases.get(i).getSituacaoMesa().equals("livre")) {
                listadeBotoes.get(listaModelMesases.get(i).getNumeroMesa() - 1).setForeground(Color.GREEN);
            }
            if (listaModelMesases.get(i).getSituacaoMesa().equals("aberto")) {
                listadeBotoes.get(listaModelMesases.get(i).getNumeroMesa() - 1).setForeground(Color.RED);
            }
        }
    }

    private void pintarUmaMesa(int pNumeroMesa) {
        int mesa;
        String mesaString;
        for (int i = 0; i < listadeBotoes.size(); i++) {
            mesaString = listadeBotoes.get(i).getText().trim();
            mesa = Integer.parseInt(mesaString);
            if (mesa == pNumeroMesa) {
                listadeBotoes.get(i).setForeground(Color.BLUE);
            }
        }
    }

    //Excluir linha produto selecionado
    private void excluirLinhaProduto() {
        // para excluir a linha
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            return;
        } else {
            // Obtem o modelo da JTable
            DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
            // Remove a linha
            modelo.removeRow(linhaSelecionada);
        }
    }

    private void popularTabela() {
        jPanelMesas.removeAll();
        jPanelMesas.validate();
        int quantidade = 50;
        for (int i = 1; i <= quantidade; i++) {
            JRadioButton btRadio = new JRadioButton();
            JLabel labelDesenho = new JLabel();
            labelDesenho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/mesa.jpg")));
            labelDesenho.setText("        ");
            btRadio.setFont(new Font("Tahoma", 0, 55));
            btRadio.setForeground(Color.GREEN);
            btRadio.setText("" + i);
            buttonGroup1.add(btRadio);
            listadeBotoes.add(btRadio);
            // adicionar no painel
            jPanelMesas.add(btRadio);
            jPanelMesas.add(labelDesenho);
        }
        pintarMesas();
    }

    //retornar situação do produto selecionado
    private String retornarStatusSelecionado() {
        String situacao = "Em Pedido";
        if (rbEmPedido.isSelected()) {
            situacao = "Em Pedido";
        } else if (rbEntregue.isSelected()) {
            situacao = "Entregue";
        } else if (rbEnviadoCozinha.isSelected()) {
            situacao = "Enviado para Cozinha";
        } else if (rbFaturado.isSelected()) {
            situacao = "Faturado";
        } else if (rbPronto.isSelected()) {
            situacao = "Pronto";
        }
        return situacao;
    }

    //marcar situação do produto selecionado
    private void marcarStatusSelecionado(String pStatus) {
        if ("Em Pedido".equals(pStatus)) {
            rbEmPedido.setSelected(true);
        } else if ("Entregue".equals(pStatus)) {
            rbEntregue.setSelected(true);
        } else if ("Enviado para Cozinha".equals(pStatus)) {
            rbEnviadoCozinha.setSelected(true);
        } else if ("Faturado".equals(pStatus)) {
            rbFaturado.setSelected(true);
        } else if ("Pronto".equals(pStatus)) {
            rbPronto.setSelected(true);
        }
    }

    //salvar uma venda de mesa
    private boolean salvarVenda() {
        listaModelVendas = new ArrayList<>();
        listaProdutoses = new ArrayList<>();
        int codigoProduto;
        float quantidade = 0;
        BLDatas bl = new BLDatas();

        for (int i = 0; i < tbProdutos.getRowCount(); i++) {
            modelVendas = new ModelVendas();
            modelProdutos = new ModelProdutos();
            modelVendas.setClientesCodigo(1);
            modelVendas.setDesconto(viewPagamentoPDV.getDesconto());
            modelVendas.setValorTotal(viewPagamentoPDV.getValorTotal());
            modelVendas.setTipo(1);
            try {
                modelVendas.setDataVenda(bl.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            } catch (Exception ex) {
                Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
            codigoProduto = Integer.parseInt(tbProdutos.getValueAt(i, 1).toString());
            modelVendas.setProdutosCodigo(codigoProduto);
            modelVendas.setQuantidade(Float.parseFloat(tbProdutos.getValueAt(i, 3).toString()));
            modelVendas.setTipoPagamento(controllerFormaPagamento.getFormaPagamentoController(viewPagamentoPDV.getTipoPagamento()).getCodigo());
            modelVendas.setValor(Double.parseDouble(tbProdutos.getValueAt(i, 4).toString()));
            modelProdutos.setCodigo(codigoProduto);
            quantidade = Float.parseFloat(tbProdutos.getValueAt(i, 3).toString());
            modelProdutos.setEstoque(quantidade);
            modelProdutos.setValor(Double.parseDouble(tbProdutos.getValueAt(i, 4).toString()));
            listaModelVendas.add(modelVendas);
            listaProdutoses.add(modelProdutos);
        }
        modelVendas.setListamModelVendases(listaModelVendas);
        modelProdutos.setListaModelProdutoses(listaProdutoses);

        //salvar venda
        codigoVenda = controllerVendas.salvarVendasController(modelVendas);
        if (codigoVenda > 0) {
            modelVendas.setCodigo(codigoVenda);
            //da baixa no estoque
            for (int i = 0; i < modelProdutos.getListaModelProdutoses().size(); i++) {
                codigoProduto = modelProdutos.getListaModelProdutoses().get(i).getCodigo();
                quantidade = controllerProdutos.getProdutosController(codigoProduto).getEstoque() - modelProdutos.getListaModelProdutoses().get(i).getEstoque();
                controllerProdutos.atualizarProdutosQuantidadeUmController(codigoProduto, quantidade);
            }

            //salvar lista de produtos
            controllerVendas.salvarVendasProdutosController(modelVendas);
            JOptionPane.showMessageDialog(this, "Registro gravado com sucesso!");
            adicionarValorCaixa();
            //imprimir cupom
            imprimirCupom();

            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao gravar os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    /**
     * Imprimir cupom
     */
    private void imprimirCupom() {
        ControllerVendas controllerVendas = new ControllerVendas();
        controllerVendas.gerarRelatorioPDV(codigoVenda);
    }

    //adicionar valor ao caixa
    private void adicionarValorCaixa() {
        modelCaixa = new ModelCaixa();
        modelCaixa = controllerCaixa.getCaixaController(1);
        if (modelVendas.getTipoPagamento() == 1) {
            valorDinheiro = modelVendas.getValorTotal();
            modelCaixa.setDinheiro(modelCaixa.getDinheiro() + valorDinheiro);
        } else if (modelVendas.getTipoPagamento() == 2) {
            valorCartao = modelVendas.getValorTotal();
            modelCaixa.setCartao(modelCaixa.getCartao() + valorCartao);
        } else if (modelVendas.getTipoPagamento() == 3) {
            valorCheque = modelVendas.getValorTotal();
            modelCaixa.setCheque(modelCaixa.getCheque() + valorCheque);
        } else if (modelVendas.getTipoPagamento() == 4) {
            valorVale = modelVendas.getValorTotal();
            modelCaixa.setVale(modelCaixa.getVale() + valorVale);
        }
        controllerCaixa.atualizarCaixaController(modelCaixa);
    }

    //zerar o caixa
    private void zerarValoresCaixa() {
        valorCartao = 0;
        valorCheque = 0;
        valorDinheiro = 0;
        valorVale = 0;
    }

    //soma valor total da conta do cliente e seta no campo total
    private void somaValorTotal() {
        Float quantidade, valor;
        if (this.tfQuantidade.getText().equals("")) {
            quantidade = 0f;
        } else {
            quantidade = Float.parseFloat(this.tfQuantidade.getText());
        }
        if (this.tfValorProduto.getText().equals("")) {
            valor = 0f;
        } else {
            valor = Float.parseFloat(this.tfValorProduto.getText());
        }
        this.tfValorTotal.setText(quantidade * valor + "");
    }

    private void retornarCodigoNomeProduto() {
        modelProdutos = new ModelProdutos();
        modelProdutos = controllerProdutos.getProdutosController(this.cbProdutos.getSelectedItem().toString());
        this.tfCodigoProduto.setText(String.valueOf(modelProdutos.getCodigo()));
        this.tfValorProduto.setText(modelProdutos.getValor().toString());
    }

    //limpar dados da tabela da aba 2
    private void limparTabelaAbaDois() {
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        modelo.setNumRows(0);
    }

    //limpar campos da tabela da aba 2
    private void limparCamposAbaDois() {
        this.tfQuantidade.setText("");
        this.tfValorProduto.setText("");
        this.tfValorTotal.setText("");
        this.tfObservacao.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewMesas().setVisible(true);
            }
        });
    }

    //listar todos os produtos no combobox
    private void listarProdutos() {
        listaProdutoses = controllerProdutos.getListaProdutosController();
        cbProdutos.removeAllItems();
        for (int i = 0; i < listaProdutoses.size(); i++) {
            cbProdutos.addItem(listaProdutoses.get(i).getNome());
        }
    }

    //cadastrar um venda de uma mesa
    private boolean cadastrarVendaMesa() {
        int numeroMesa = Integer.parseInt(this.tfNumeroMesa.getText());

        //recupero a mesa
        ModelMesas mesa = controllerMesas.getMesaController(numeroMesa);

        //exlui dados anteriores
        controllerItensPedidoMesa.excluirItensPedidoMesaController(numeroMesa);
        if (tbProdutos.getRowCount() < 1) {
            JOptionPane.showMessageDialog(this, "Você deve adicionar ao menos um produto para salvar!", "ATENÇÂO", JOptionPane.WARNING_MESSAGE);
            return false;
        } else {
            listaModelItensPedidoMesas = new ArrayList<>();

            for (int i = 0; i < tbProdutos.getRowCount(); i++) {
                modelItensPedidoMesa = new ModelItensPedidoMesa();
                modelItensPedidoMesa.setCodigoMesa(Integer.parseInt(tbProdutos.getValueAt(i, 0).toString()));
                modelItensPedidoMesa.setCodigoProduto(Integer.parseInt(tbProdutos.getValueAt(i, 1).toString()));
                modelItensPedidoMesa.setQuantidade(Float.parseFloat(tbProdutos.getValueAt(i, 3).toString()));
                modelItensPedidoMesa.setStatusPedido(String.valueOf(tbProdutos.getValueAt(i, 6).toString()));
                modelItensPedidoMesa.setObservacao(String.valueOf(tbProdutos.getValueAt(i, 7).toString()));
                listaModelItensPedidoMesas.add(modelItensPedidoMesa);
            }

            modelProdutos.setListaModelProdutoses(listaProdutoses);

            //exclui registros anteriores se ouver
            controllerItensPedidoMesa.excluirItensPedidoMesaController(modelItensPedidoMesa.getCodigoMesa());
            //salvar
            controllerItensPedidoMesa.salvarItensPedidoMesaController(listaModelItensPedidoMesas);
            JOptionPane.showMessageDialog(this, "Registro gravado com sucesso!");

            //atualizar
            //avançar para aba 2
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
            return true;
        }
    }

    /**
     * Soma e atualiza os valores total
     *
     * @return
     */
    private float somaEAtualizaValorTotal() {
        float soma = 0;
        float valor = 0;
        int cont = tbProdutos.getRowCount();
        for (int i = 0; i < cont; i++) {
            valor = Float.parseFloat(String.valueOf(tbProdutos.getValueAt(i, 5)));
            soma = valor + soma;
        }
        return soma;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterarStatus;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btFecharConta;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btVoltar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbProdutos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelMesas;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbAtualizar;
    private javax.swing.JButton jbImprimirCozinha;
    private javax.swing.JButton jbVizualizarMesa;
    private javax.swing.JRadioButton rbEmPedido;
    private javax.swing.JRadioButton rbEntregue;
    private javax.swing.JRadioButton rbEnviadoCozinha;
    private javax.swing.JRadioButton rbFaturado;
    private javax.swing.JRadioButton rbPronto;
    private javax.swing.JTable tbProdutos;
    private javax.swing.JTextField tfCodigoProduto;
    private javax.swing.JTextField tfNumeroMesa;
    private javax.swing.JTextField tfObservacao;
    private javax.swing.JTextField tfQuantidade;
    private javax.swing.JTextField tfValorProduto;
    private javax.swing.JTextField tfValorTotal;
    private javax.swing.JTextField tfValorTotalMesa;
    // End of variables declaration//GEN-END:variables
}
